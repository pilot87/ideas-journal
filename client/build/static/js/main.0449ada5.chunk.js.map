{"version":3,"sources":["features/errors.ts","features/auth.ts","pages/addUserPage.tsx","componenst/Menu.tsx","pages/loginPage.tsx","pages/aboutPage.tsx","pages/addIdeaPage.tsx","features/ideas.ts","pages/ideasPage.tsx","componenst/ModalLogin.tsx","features/viewIdea.ts","pages/viewIdeaPage.tsx","pages/addAnnouncementPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ForbiddenException","errors","checkForbidden","configure","enforceActions","makeAutoObservable","autoBind","forbidden","observable","action","auth","es","e","username","token","email","JSON","parse","document","cookie","err","stringify","this","baseURL","timeout","headers","Authorization","session","Proxy","axios","create","request_params","get","target","prop","includes","apply","thisArg","argArray","Promise","resolve","reject","a","res","response","status","data","message","value","computed","autorun","AddUserPage","observer","useState","msg","state","password","form","setForm","setMsg","changeHandler","event","name","handleRegister","send","post","then","window","location","assign","catch","console","log","Object","keys","reduce","acc","key","filter","s","Container","fluid","Row","Col","Form","Group","controlId","Label","Control","type","placeholder","onChange","map","Toast","Header","closeButton","className","Body","Button","id","variant","onClick","to","Menu","Dropdown","Toggle","Navbar","bg","Nav","LoginPage","setSession","setUsername","setEmail","AboutPage","Result","visible","Taglist","candidate","tags","push","splice","findIndex","elem","addTag","Array","AddIdeaPage","result","taglist","ideaname","short_desc","describtion","link","focusHandler","hide","handleAdd","acceptCandidate","clear","setVariant","show","tag","deliteTag","chars","test","setCandidate","charCode","ideas","runInAction","list","auto","IdeasPage","useEffect","update","setAuto","idea","toString","ModalLogin","uncheckForbidden","compare","b","anname","localeCompare","viewIdea","an","sort","text","author","Acc","i","undefined","n","set","comment","error","Map","ViewIdeaPage","useParams","announcements","setResult","setID","parseInt","clean","width","Card","toggle","comments","co","handleChangeComment","handleClearComment","setError","AddAnnouncementPage","updCycle","sleep","ms","setTimeout","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Helmet","href","rel","content","getElementById"],"mappings":"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","file":"static/js/main.0449ada5.chunk.js","sourcesContent":["import { action, configure, makeAutoObservable, observable } from 'mobx'\r\rexport class ForbiddenException {\r  constructor() {\r    errors.checkForbidden()\r  }\r}\r\rconfigure({ enforceActions: 'observed' })\r\rexport class Errors {\r  @observable forbidden = false\r\r  @action checkForbidden() {\r    this.forbidden = true\r  }\r\r  @action uncheckForbidden() {\r    this.forbidden = false\r  }\r\r  constructor() {\r    makeAutoObservable(this, {}, { autoBind: true })\r  }\r}\r\rexport const errors = new Errors()\r","import {\r\n  observable,\r\n  computed,\r\n  configure,\r\n  action,\r\n  autorun,\r\n  makeAutoObservable,\r\n} from 'mobx'\r\nimport axios from 'axios'\r\n\r\nimport { ForbiddenException } from './errors'\r\n\r\nconfigure({ enforceActions: 'observed' })\r\n\r\nexport class Auth {\r\n  es = (() => {\r\n    let e = { username: '', token: '', email: '' }\r\n    try {\r\n      e = JSON.parse(document.cookie)\r\n    } catch (err) {\r\n      document.cookie = JSON.stringify(e)\r\n    }\r\n    return e\r\n  })()\r\n\r\n  @observable username = this.es.username\r\n  @observable session = this.es.token\r\n  @observable email = this.es.email\r\n  @computed get request_params() {\r\n    return {\r\n      baseURL: '/api',\r\n      timeout: 3000,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: this.session,\r\n      },\r\n    }\r\n  }\r\n\r\n  @computed get send() {\r\n    return new Proxy(axios.create(this.request_params), {\r\n      get(target: any, prop: string | symbol): Promise<any> {\r\n        if (\r\n          typeof prop === 'string' &&\r\n          ['get', 'post'].includes(<string>prop)\r\n        ) {\r\n          return new Proxy(target[prop], {\r\n            apply(target: any, thisArg: any, argArray: any[]) {\r\n              return new Promise(async (resolve, reject) => {\r\n                try {\r\n                  const res = await target(...argArray)\r\n                  resolve(res)\r\n                } catch (err) {\r\n                  if (\r\n                    err.response.status === 403 &&\r\n                    err.response.data.message === 'Forbidden resource'\r\n                  ) {\r\n                    throw new ForbiddenException()\r\n                  }\r\n                  reject(err)\r\n                }\r\n              })\r\n            },\r\n          })\r\n        }\r\n        return target[prop]\r\n      },\r\n    })\r\n  }\r\n\r\n  @action setSession(value: string) {\r\n    this.session = value\r\n  }\r\n  @action setUsername(value: string) {\r\n    this.username = value\r\n  }\r\n  @action setEmail(value: string) {\r\n    this.email = value\r\n  }\r\n\r\n  constructor() {\r\n    makeAutoObservable(this, {}, { autoBind: true })\r\n  }\r\n}\r\n\r\nexport const auth = new Auth()\r\n\r\nautorun(() => {\r\n  document.cookie = JSON.stringify({\r\n    username: auth.username,\r\n    token: auth.session,\r\n    email: auth.email,\r\n  })\r\n})\r\n","import React, { useState } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/esm/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Toast from 'react-bootstrap/Toast'\r\n\r\nimport { auth } from '../features/auth'\r\n\r\nexport const AddUserPage = observer(() => {\r\n  const [form, setForm] = useState({\r\n    email: { msg: '', state: 'adduser_label' },\r\n    password: { msg: '', state: 'adduser_label' },\r\n    username: { msg: '', state: 'adduser_label' },\r\n  })\r\n\r\n  const [msg, setMsg] = useState({\r\n    errors: { email: [], password: [], username: [] },\r\n  })\r\n\r\n  const changeHandler = (event: any) => {\r\n    setForm({\r\n      ...form,\r\n      [event.target.name]: {\r\n        msg: event.target.value,\r\n        state: 'adduser_label active',\r\n      },\r\n    })\r\n  }\r\n\r\n  const handleRegister = async () => {\r\n    auth.send\r\n      .post('/auth/register', {\r\n        email: form.email.msg,\r\n        username: form.username.msg,\r\n        password: form.password.msg,\r\n      })\r\n      .then(() => {\r\n        setMsg({\r\n          errors: { email: [], password: [], username: [] },\r\n        })\r\n        window.location.assign('login')\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err.response.data)\r\n        setMsg({\r\n          errors: Object.keys(msg.errors).reduce(\r\n            (acc: any, key: string) => {\r\n              acc[key] = err.response.data.message.filter((s: string) =>\r\n                s.includes(key),\r\n              )\r\n              return acc\r\n            },\r\n            { email: '', password: '', username: '' },\r\n          ),\r\n        })\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col>\r\n          <Form.Group controlId=\"email\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"name@example.com\"\r\n              value={form.email.msg}\r\n              onChange={changeHandler}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {msg.errors.email.map((err) => (\r\n          <Toast>\r\n            <Col>\r\n              <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">Error in email</strong>\r\n              </Toast.Header>\r\n              <Toast.Body>{err}</Toast.Body>\r\n            </Col>\r\n          </Toast>\r\n        ))}\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Form.Group controlId=\"username\">\r\n            <Form.Label>User name</Form.Label>\r\n            <Form.Control\r\n              name=\"username\"\r\n              type=\"text\"\r\n              placeholder=\"User name\"\r\n              value={form.username.msg}\r\n              onChange={changeHandler}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {msg.errors.username.map((err) => (\r\n          <Toast>\r\n            <Col>\r\n              <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">Error in user name</strong>\r\n              </Toast.Header>\r\n              <Toast.Body>{err}</Toast.Body>\r\n            </Col>\r\n          </Toast>\r\n        ))}\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Form.Group controlId=\"password\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={form.password.msg}\r\n              onChange={changeHandler}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {msg.errors.password.map((err) => (\r\n          <Toast>\r\n            <Col>\r\n              <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">Error in password</strong>\r\n              </Toast.Header>\r\n              <Toast.Body>{err}</Toast.Body>\r\n            </Col>\r\n          </Toast>\r\n        ))}\r\n      </Row>\r\n      <Row className=\"justify-content-evenly\">\r\n        <Col>\r\n          <Button id=\"register\" variant=\"secondary\" onClick={handleRegister}>\r\n            Register\r\n          </Button>\r\n        </Col>\r\n        <Col>\r\n          <NavLink\r\n            id=\"login\"\r\n            className=\"float-right btn btn-secondary\"\r\n            to=\"/login\"\r\n          >\r\n            Log in\r\n          </NavLink>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n})\r\n","import React from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nimport { auth } from '../features/auth'\r\n\r\nexport const Menu = observer(() => {\r\n  const username = auth.username\r\n  return (\r\n    <>\r\n      <Dropdown className=\"d-flex d-sm-none m-3 float-right\">\r\n        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n          Ideas journal\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu>\r\n          <NavLink className=\"dropdown-item\" to=\"/addidea\">\r\n            Create idea\r\n          </NavLink>\r\n          <NavLink className=\"dropdown-item\" to=\"/ideas\">\r\n            Ideas\r\n          </NavLink>\r\n          <NavLink\r\n            className=\"dropdown-item\"\r\n            to={username === '' ? '/register' : '/about'}\r\n          >\r\n            {'Hello, ' + (username === '' ? 'Guest' : username)}\r\n          </NavLink>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      <Navbar bg=\"dark\" variant=\"dark\" className=\"d-none d-sm-flex\">\r\n        <NavLink className=\"navbar-brand\" to=\"/\">\r\n          Ideas journal\r\n        </NavLink>\r\n        <Nav className=\"mr-auto\">\r\n          <NavLink to=\"/addidea\" className=\"nav-link\">\r\n            Create idea\r\n          </NavLink>\r\n          <NavLink to=\"/ideas\" className=\"nav-link\">\r\n            Ideas\r\n          </NavLink>\r\n        </Nav>\r\n        <NavLink\r\n          id=\"hello\"\r\n          className=\"btn btn-secondary\"\r\n          to={username === '' ? '/register' : '/about'}\r\n        >\r\n          {'Hello, ' + (username === '' ? 'Guest' : username)}\r\n        </NavLink>\r\n      </Navbar>\r\n    </>\r\n  )\r\n})\r\n","import React, { useState } from 'react'\r\n\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { auth } from '../features/auth'\r\n\r\nexport const LoginPage = () => {\r\n  const [form, setForm] = useState({\r\n    username: { msg: '', state: '' },\r\n    password: { msg: '', state: '' },\r\n  })\r\n\r\n  const [msg, setMsg] = useState({\r\n    errors: { password: [], username: [] },\r\n  })\r\n\r\n  const changeHandler = (event: any) => {\r\n    setForm({\r\n      ...form,\r\n      [event.target.name]: { msg: event.target.value, state: ' active' },\r\n    })\r\n  }\r\n\r\n  const handleLogin = () => {\r\n    auth.send\r\n      .post('/auth/login', {\r\n        username: form.username.msg,\r\n        password: form.password.msg,\r\n      })\r\n      .then((res: any) => {\r\n        auth.setSession('Bearer ' + res.data.token)\r\n        auth.setUsername(res.data.username)\r\n        auth.setEmail(res.data.email)\r\n        window.location.assign('about')\r\n      })\r\n      .catch((err: any) => {\r\n        setMsg({\r\n          errors: Object.keys(msg.errors).reduce(\r\n            (acc: any, key: string) => {\r\n              acc[key] = err.response.data.message.filter((s: string) =>\r\n                s.includes(key),\r\n              )\r\n              return acc\r\n            },\r\n            { password: '', username: '' },\r\n          ),\r\n        })\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col>\r\n          <Form.Group controlId=\"username\">\r\n            <Form.Label>User name</Form.Label>\r\n            <Form.Control\r\n              name=\"username\"\r\n              type=\"text\"\r\n              placeholder=\"User name\"\r\n              value={form.username.msg}\r\n              onChange={changeHandler}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col>\r\n          {msg.errors.username.map((err) => (\r\n            <Toast>\r\n              <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">Error in user name</strong>\r\n              </Toast.Header>\r\n              <Toast.Body>{err}</Toast.Body>\r\n            </Toast>\r\n          ))}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Form.Group controlId=\"password\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={form.password.msg}\r\n              onChange={changeHandler}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col>\r\n          {msg.errors.password.map((err) => (\r\n            <Toast>\r\n              <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">Error in password</strong>\r\n              </Toast.Header>\r\n              <Toast.Body>{err}</Toast.Body>\r\n            </Toast>\r\n          ))}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Button\r\n            variant=\"secondary\"\r\n            className=\"float-right\"\r\n            id=\"login\"\r\n            onClick={handleLogin}\r\n          >\r\n            Login\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { auth } from '../features/auth'\r\n\r\nexport const AboutPage = observer(() => {\r\n  const send = auth.send\r\n  const email = auth.email\r\n  const setUsername = auth.setUsername\r\n  const setEmail = auth.setEmail\r\n  const setSession = auth.setSession\r\n\r\n  const [form, setForm] = useState({\r\n    email: { msg: '', state: '' },\r\n    password: { msg: '', state: '' },\r\n  })\r\n\r\n  const [msg, setMsg] = useState({\r\n    errors: { password: [], email: [] },\r\n  })\r\n  const changeHandler = (event: any) => {\r\n    setForm({\r\n      ...form,\r\n      [event.target.name]: { msg: event.target.value, state: ' active' },\r\n    })\r\n  }\r\n\r\n  const handleChangeEmail = () => {\r\n    send\r\n      .post('/profile/chemail', { email: form.email.msg })\r\n      .then(() => {\r\n        setEmail(form.email.msg)\r\n        setMsg({\r\n          errors: { email: [], password: [] },\r\n        })\r\n      })\r\n      .catch((err: any) =>\r\n        setMsg({\r\n          errors: Object.keys(msg.errors).reduce(\r\n            (acc: any, key: string) => {\r\n              acc[key] = err.response.data.message.filter((s: string) =>\r\n                s.includes(key),\r\n              )\r\n              return acc\r\n            },\r\n            { email: '', password: '', username: '' },\r\n          ),\r\n        }),\r\n      )\r\n  }\r\n\r\n  const handleChangePassword = () => {\r\n    send\r\n      .post('/profile/chpasswd', { password: form.password.msg })\r\n      .then(() => {\r\n        setMsg({\r\n          errors: { email: [], password: [] },\r\n        })\r\n      })\r\n      .catch((err: any) =>\r\n        setMsg({\r\n          errors: Object.keys(msg.errors).reduce(\r\n            (acc: any, key: string) => {\r\n              acc[key] = err.response.data.message.filter((s: string) =>\r\n                s.includes(key),\r\n              )\r\n              return acc\r\n            },\r\n            { email: '', password: '', username: '' },\r\n          ),\r\n        }),\r\n      )\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    setSession('')\r\n    setEmail('')\r\n    setUsername('')\r\n    window.location.assign('/')\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <Form.Group controlId=\"email\">\r\n            <Form.Label>{'Your current email: ' + email}</Form.Label>\r\n            <Form.Control\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"name@example.com\"\r\n              value={form.email.msg}\r\n              onChange={changeHandler}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col>\r\n          {msg.errors.email.map((err) => (\r\n            <Toast>\r\n              <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">Error in email</strong>\r\n              </Toast.Header>\r\n              <Toast.Body>{err}</Toast.Body>\r\n            </Toast>\r\n          ))}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Button id=\"chemail\" variant=\"primary\" onClick={handleChangeEmail}>\r\n            Change email\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Form.Group controlId=\"password\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={form.password.msg}\r\n              onChange={changeHandler}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col>\r\n          {msg.errors.password.map((err) => (\r\n            <Toast>\r\n              <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">Error in password</strong>\r\n              </Toast.Header>\r\n              <Toast.Body>{err}</Toast.Body>\r\n            </Toast>\r\n          ))}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Button\r\n            id=\"chpasswd\"\r\n            variant=\"primary\"\r\n            onClick={handleChangePassword}\r\n          >\r\n            Change password\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Button\r\n            id=\"logout\"\r\n            variant=\"primary\"\r\n            onClick={handleLogout}\r\n            className=\"float-right\"\r\n          >\r\n            Logout\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n})\r\n","import React, { useState } from 'react'\rimport { observer } from 'mobx-react-lite'\r\rimport Container from 'react-bootstrap/Container'\rimport Row from 'react-bootstrap/Row'\rimport Col from 'react-bootstrap/Col'\rimport Form from 'react-bootstrap/Form'\rimport Toast from 'react-bootstrap/Toast'\rimport Button from 'react-bootstrap/Button'\rimport Badge from 'react-bootstrap/Badge'\rimport Alert from 'react-bootstrap/Alert'\r\rimport { auth } from '../features/auth'\rimport { makeAutoObservable, observable, action } from 'mobx'\r\rclass Result {\r  @observable msg = ''\r  @observable variant = 'success'\r  @observable visible = false\r\r  @action setMsg(value: string) {\r    this.msg = value\r  }\r  @action setVariant(value: string) {\r    this.variant = value\r  }\r\r  @action show() {\r    console.log('show')\r    this.visible = true\r  }\r  @action hide() {\r    console.log('hide')\r    this.visible = false\r  }\r\r  constructor() {\r    makeAutoObservable(this, {}, { autoBind: true })\r  }\r}\r\rclass Taglist {\r  @observable tags = new Array<string>(0)\r  @observable candidate = ''\r\r  setCandidate(value: string) {\r    this.candidate = value\r  }\r\r  addTag(value: string) {\r    this.tags.push(value)\r  }\r\r  deliteTag(value: string) {\r    this.tags.splice(\r      this.tags.findIndex((elem) => elem === value),\r      1,\r    )\r  }\r\r  clear() {\r    this.tags = []\r    this.candidate = ''\r  }\r\r  acceptCandidate() {\r    if (this.candidate !== '') {\r      this.addTag(this.candidate)\r      this.candidate = ''\r    }\r  }\r\r  constructor() {\r    makeAutoObservable(this, {}, { autoBind: true })\r  }\r}\r\rexport const AddIdeaPage = observer(() => {\r  const [result] = useState(new Result())\r  const [taglist] = useState(new Taglist())\r  const [form, setForm] = useState({\r    ideaname: '',\r    short_desc: '',\r    describtion: '',\r    link: '',\r  })\r\r  const [msg, setMsg] = useState({\r    ideaname: [],\r    short_desc: [],\r    describtion: [],\r    tags: [],\r    link: [],\r  })\r\r  const focusHandler = () => {\r    result.hide()\r  }\r\r  const changeHandler = (event: any) => {\r    setForm({\r      ...form,\r      [event.target.name]: event.target.value,\r    })\r    result.hide()\r  }\r\r  const changeTagsHandler = (event: any) => {\r    const chars = event.target.value\r    if (/^[A-Za-z0-9]/.test(chars)) {\r      taglist.setCandidate(chars)\r    }\r    if (/ $/.test(chars)) {\r      taglist.acceptCandidate()\r    }\r    result.hide()\r  }\r\r  const blurTagsHandler = () => {\r    taglist.acceptCandidate()\r  }\r\r  const handleAdd = async () => {\r    taglist.acceptCandidate()\r    auth.send\r      .post('/idea/create', { ...form, tags: taglist.tags })\r      .then((res: any) => {\r        setMsg({\r          ideaname: [],\r          short_desc: [],\r          describtion: [],\r          tags: [],\r          link: [],\r        })\r        setForm({ ideaname: '', link: '', describtion: '', short_desc: '' })\r        taglist.clear()\r        result.setMsg(res.data.message)\r        result.setVariant('success')\r        result.show()\r      })\r      .catch((err: any) => {\r        // console.log(err.response.data)\r        setMsg(\r          Object.keys(msg).reduce(\r            (acc: any, key: string) => {\r              acc[key] = err.response.data.message.filter((s: string) =>\r                s.includes(key),\r              )\r              return acc\r            },\r            {\r              ideaname: [],\r              short_desc: [],\r              describtion: [],\r              tags: [],\r              link: [],\r            },\r          ),\r        )\r        result.setMsg('Errors, see detailes above')\r        result.setVariant('danger')\r        result.show()\r      })\r  }\r\r  const keyUpHandler = (event: any) => {\r    if (event.charCode === 13) {\r      taglist.acceptCandidate()\r    }\r    if (event.charCode === 27) {\r      taglist.setCandidate('')\r    }\r  }\r\r  return (\r    <Container>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"ideaname\">\r            <Form.Label>Idea name</Form.Label>\r            <Form.Control\r              name=\"ideaname\"\r              type=\"text\"\r              placeholder=\"Idea name\"\r              value={form.ideaname}\r              onChange={changeHandler}\r              onFocus={focusHandler}\r            />\r          </Form.Group>\r        </Col>\r        {msg.ideaname.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in idea name</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"short_desc\">\r            <Form.Label>Short describtion</Form.Label>\r            <Form.Control\r              name=\"short_desc\"\r              type=\"text\"\r              placeholder=\"short description\"\r              value={form.short_desc}\r              onChange={changeHandler}\r              onFocus={focusHandler}\r            />\r          </Form.Group>\r        </Col>\r        {msg.short_desc.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in short description</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"describtion\">\r            <Form.Label>Describtion</Form.Label>\r            <Form.Control\r              name=\"describtion\"\r              type=\"text\"\r              placeholder=\"Describtion\"\r              value={form.describtion}\r              onChange={changeHandler}\r              onFocus={focusHandler}\r            />\r          </Form.Group>\r        </Col>\r        {msg.describtion.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in describtion</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"tags_cont\">\r            <Form.Label>Tags</Form.Label>\r            <Form.Control\r              type=\"text\"\r              placeholder=\"Tags\"\r              as=\"div\"\r              className=\"p-0\"\r            >\r              <Row className=\"m-0 h-100\">\r                {taglist.tags.map((tag) => (\r                  <Col sm=\"auto\">\r                    <Badge\r                      variant=\"secondary\"\r                      className=\"hover w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25\"\r                      onClick={() => {\r                        taglist.deliteTag(tag)\r                      }}\r                    >\r                      {tag}\r                    </Badge>\r                  </Col>\r                ))}\r                <Col className=\"p-0\">\r                  <input\r                    id=\"tags\"\r                    type=\"text\"\r                    name=\"tags\"\r                    value={taglist.candidate}\r                    onChange={changeTagsHandler}\r                    onFocus={focusHandler}\r                    onBlur={blurTagsHandler}\r                    onKeyPress={keyUpHandler}\r                    className=\"w-100 h-100 border-0\"\r                  />\r                </Col>\r              </Row>\r            </Form.Control>\r          </Form.Group>\r        </Col>\r        {msg.tags.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in tags</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"link\">\r            <Form.Label>Link</Form.Label>\r            <Form.Control\r              name=\"link\"\r              type=\"text\"\r              placeholder=\"Link\"\r              value={form.link}\r              onChange={changeHandler}\r              onFocus={focusHandler}\r            />\r          </Form.Group>\r        </Col>\r        {msg.link.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in link</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row className=\"justify-content-evenly\">\r        <Col>\r          <Button id=\"register\" variant=\"secondary\" onClick={handleAdd}>\r            Create\r          </Button>\r        </Col>\r      </Row>\r      <Row>\r        <Col>\r          <Alert variant={result.variant} show={result.visible}>\r            {result.msg}\r          </Alert>\r        </Col>\r      </Row>\r    </Container>\r  )\r})\r","import {\r  action,\r  configure,\r  makeAutoObservable,\r  observable,\r  runInAction,\r} from 'mobx'\r\rimport { auth } from './auth'\r\rexport interface Idea {\r  author: string\r  ideaname: string\r  short_desc: string\r  tags: string[]\r  status: string\r  id: number\r}\r\rconfigure({ enforceActions: 'observed' })\r\rexport class Ideas {\r  @observable ideas = new Array<Idea>(0)\r  @observable auto = false\r\r  @action update() {\r    auth.send\r      .get('/idea/listall')\r      .then((res: any) => {\r        runInAction(async () => {\r          this.ideas = res.data.list\r        })\r      })\r      .catch(() => console.log('update errors'))\r  }\r\r  @action setAuto(value: boolean) {\r    this.auto = value\r  }\r\r  constructor() {\r    makeAutoObservable(this, {}, { autoBind: true })\r  }\r}\r\rexport const ideas = new Ideas()\r","import React, { useEffect } from 'react'\rimport { observer } from 'mobx-react-lite'\rimport { NavLink } from 'react-router-dom'\r\rimport Badge from 'react-bootstrap/Badge'\rimport Container from 'react-bootstrap/Container'\rimport Row from 'react-bootstrap/Row'\rimport Col from 'react-bootstrap/Col'\r\rimport { ideas } from '../features/ideas'\r\rexport const IdeasPage = observer(() => {\r  useEffect(() => {\r    ideas.update()\r    ideas.setAuto(true)\r    return () => {\r      ideas.setAuto(false)\r    }\r  }, [])\r\r  return (\r    <Container fluid>\r      {ideas.ideas.map((idea) => (\r        <Row>\r          <Col className=\"p-3\">\r            <NavLink\r              className=\"card bg-light border-dark\"\r              to={'/ideafull/' + idea.id.toString()}\r            >\r              <h1>{idea.ideaname}</h1>\r              <p>{idea.short_desc}</p>\r              <Row className=\"m-0 h-100\">\r                {idea.tags.map((tag) => (\r                  <Col sm=\"auto\">\r                    <Badge\r                      variant=\"secondary\"\r                      className=\"w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25\"\r                    >\r                      {tag}\r                    </Badge>\r                  </Col>\r                ))}\r              </Row>\r            </NavLink>\r          </Col>\r        </Row>\r      ))}\r    </Container>\r  )\r})\r","import React from 'react'\rimport { observer } from 'mobx-react-lite'\r\rimport Modal from 'react-bootstrap/Modal'\rimport Button from 'react-bootstrap/Button'\rimport Container from 'react-bootstrap/Container'\rimport Row from 'react-bootstrap/Row'\rimport Col from 'react-bootstrap/Col'\r\rimport { errors } from '../features/errors'\r\rexport const ModalLogin = observer(() => {\r  return (\r    <Modal\r      show={errors.forbidden}\r      backdrop=\"static\"\r      keyboard={false}\r      aria-labelledby=\"contained-modal-title-vcenter\"\r      centered\r    >\r      <Modal.Header>\r        <Modal.Title id=\"contained-modal-title-vcenter\">\r          Authorisation Error\r        </Modal.Title>\r      </Modal.Header>\r      <Modal.Body>You have to log in or continue as a guest</Modal.Body>\r      <Modal.Footer>\r        <Container>\r          <Row className=\"justify-content-between\">\r            <Col sm=\"auto\" className=\"p-0\">\r              <Button\r                variant=\"info\"\r                onClick={() => {\r                  errors.uncheckForbidden()\r                  window.location.assign('/login')\r                }}\r              >\r                Go to log in page\r              </Button>\r            </Col>\r            <Col sm=\"auto\" className=\"p-0\">\r              <Button\r                variant=\"secondary\"\r                onClick={() => {\r                  errors.uncheckForbidden()\r                }}\r              >\r                Continue as a guest\r              </Button>\r            </Col>\r          </Row>\r        </Container>\r      </Modal.Footer>\r    </Modal>\r  )\r})\r","import { action, makeAutoObservable, observable, runInAction } from 'mobx'\rimport { auth } from './auth'\r\rexport interface Announcement {\r  username: string\r  anname: string\r  short_desc: string\r  status: string\r  tags: string[]\r  comments: {\r    text: string\r    author: string\r  }[]\r}\r\rconst compare = (a: Announcement, b: Announcement) =>\r  a.anname.localeCompare(b.anname)\r\rclass ViewIdea {\r  @observable auto = false\r  @observable id = 0\r  @observable an = new Array<Announcement>(0)\r  @observable result = ''\r\r  @action setID(value: number) {\r    this.id = value\r  }\r\r  @action setAuto(value: boolean) {\r    this.auto = value\r  }\r\r  @observable idea = {\r    author: '',\r    ideaname: '',\r    short_desc: '',\r    tags: new Array<string>(0),\r    status: '',\r    describtion: '',\r    link: '',\r    id: 0,\r  }\r\r  @action update() {\r    if (this.id) {\r      auth.send.get('idea/getbyid/' + this.id).then((res: any) => {\r        runInAction(() => {\r          this.idea = res.data.idea\r        })\r      })\r      auth.send.get('announcement/list/' + this.id).then((res: any) => {\r        runInAction(() => {\r          this.an = res.data.list\r          this.an.sort(compare)\r        })\r      })\r      if (this.idea.status === 'complete') {\r        auth.send.get('result/getbyid/' + this.id).then((res: any) => {\r          runInAction(() => {\r            this.result = res.data.text\r          })\r        })\r      }\r    }\r  }\r\r  @action clean() {\r    this.idea = {\r      author: '',\r      ideaname: '',\r      short_desc: '',\r      tags: new Array<string>(0),\r      status: '',\r      describtion: '',\r      link: '',\r      id: 0,\r    }\r  }\r\r  constructor() {\r    makeAutoObservable(this, {}, { autoBind: true })\r  }\r}\r\rexport const viewIdea = new ViewIdea()\r","import React, { useEffect, useState } from 'react'\rimport { observer } from 'mobx-react-lite'\rimport { useParams, NavLink } from 'react-router-dom'\r\rimport Button from 'react-bootstrap/Button'\rimport Badge from 'react-bootstrap/Badge'\rimport Accordion from 'react-bootstrap/Accordion'\rimport Alert from 'react-bootstrap/Alert'\rimport Card from 'react-bootstrap/Card'\rimport Popover from 'react-bootstrap/Popover'\rimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\rimport Form from 'react-bootstrap/Form'\rimport Carousel from 'react-bootstrap/Carousel'\r\rimport Container from 'react-bootstrap/Container'\rimport Row from 'react-bootstrap/Row'\rimport Col from 'react-bootstrap/Col'\r\rimport { Announcement, viewIdea } from '../features/viewIdea'\rimport { action, makeAutoObservable, observable } from 'mobx'\rimport { auth } from '../features/auth'\r\rinterface ann_com {\r  visible: string\r  comment: string\r  errors: string[]\r}\r\rclass Acc {\r  @observable n = new Map<number, ann_com>()\r\r  get(i: number): ann_com {\r    if (this.n.get(i) === undefined) {\r      this.n.set(i, { visible: '', comment: '', errors: [] })\r    }\r    // @ts-ignore\r    return this.n.get<ann_com>(i)\r  }\r\r  @action handleChangeComment(i: number, event: any) {\r    this.n.set(i, {\r      visible: this.get(i).visible,\r      comment: event.target.value,\r      errors: [],\r    })\r  }\r\r  @action handleClearComment(i: number) {\r    this.n.set(i, {\r      visible: this.get(i).visible,\r      comment: '',\r      errors: [],\r    })\r  }\r\r  @action setError(error: string[], i: number) {\r    console.log('setError: ', error)\r    this.n.set(i, {\r      visible: this.get(i).visible,\r      comment: this.get(i).comment,\r      errors: error,\r    })\r  }\r\r  @action toggle(i: number) {\r    const a = this.get(i).visible\r    if (a === '') {\r      this.n.set(i, {\r        visible: 'show',\r        comment: this.get(i).comment,\r        errors: this.get(i).errors,\r      })\r    } else {\r      this.n.set(i, {\r        visible: '',\r        comment: this.get(i).comment,\r        errors: this.get(i).errors,\r      })\r    }\r  }\r\r  constructor() {\r    makeAutoObservable(this, {}, { autoBind: true })\r  }\r}\r\rexport const ViewIdeaPage = observer(() => {\r  const id = useParams<{ id: string }>().id\r\r  const idea = viewIdea.idea\r  const announcements: Announcement[] = viewIdea.an\r  const [acc] = useState(new Acc())\r  const [result, setResult] = useState('')\r\r  useEffect(() => {\r    viewIdea.setID(parseInt(id))\r    viewIdea.update()\r    viewIdea.setAuto(true)\r    return () => {\r      viewIdea.setAuto(false)\r      viewIdea.clean()\r      viewIdea.setID(0)\r    }\r  }, [])\r\r  return (\r    <Container fluid>\r      {idea.status === 'complete' ? (\r        <Row>\r          <Col>\r            <Alert variant=\"primary\">Idea complete</Alert>\r          </Col>\r        </Row>\r      ) : (\r        <></>\r      )}\r      <Row>\r        <Col>\r          <Badge variant=\"info\">{idea.ideaname}</Badge>\r        </Col>\r      </Row>\r      <Row>\r        <Col>\r          <Badge variant=\"light\">{idea.short_desc}</Badge>\r        </Col>\r      </Row>\r      <Row>\r        <Col>{idea.author}</Col>\r      </Row>\r      <Row>\r        <Col>{idea.describtion}</Col>\r      </Row>\r      <Row>\r        <Col>\r          <a href={idea.link}>{idea.link}</a>\r        </Col>\r      </Row>\r      <Row>\r        {idea.tags.map((tag) => (\r          <Col sm=\"auto\">\r            <Badge\r              variant=\"secondary\"\r              className=\"w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25\"\r            >\r              {tag}\r            </Badge>\r          </Col>\r        ))}\r      </Row>\r      <Row className=\"d-flex d-md-none\">\r        <Col>\r          <Carousel controls={true}>\r            {announcements.map((an, i) => (\r              <Carousel.Item>\r                <Card style={{ width: '18rem' }}>\r                  <Card.Body>\r                    {an.status === 'chosen' ? (\r                      <Alert variant=\"primary\">This announcement chosen</Alert>\r                    ) : (\r                      <></>\r                    )}\r                    {an.status === 'complete' ? (\r                      <Alert variant=\"primary\">Announcement complete</Alert>\r                    ) : (\r                      <></>\r                    )}\r                    <Card.Title>{an.anname}</Card.Title>\r                    <Card.Subtitle className=\"mb-2 text-muted\">\r                      {an.username}\r                    </Card.Subtitle>\r                    <Card.Text>{an.short_desc}</Card.Text>\r                    <Container>\r                      <Row>\r                        {an.tags.map((tag) => (\r                          <Col sm=\"auto\">\r                            <Badge\r                              variant=\"secondary\"\r                              className=\"w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25\"\r                            >\r                              {tag}\r                            </Badge>\r                          </Col>\r                        ))}\r                      </Row>\r                    </Container>\r                    {idea.author === auth.username && idea.status === 'new' ? (\r                      <OverlayTrigger\r                        trigger=\"click\"\r                        rootClose\r                        placement=\"bottom\"\r                        overlay={\r                          <Popover id=\"popover-contained\">\r                            <Popover.Title as=\"h3\">\r                              Popover bottom\r                            </Popover.Title>\r                            <Popover.Content data-trigger=\"focus\">\r                              <Button\r                                variant=\"success\"\r                                className=\"m-1\"\r                                onClick={() => {\r                                  auth.send\r                                    .post('announcement/choose', {\r                                      ideaname: idea.ideaname,\r                                      anname: an.anname,\r                                    })\r                                    .then(() => {\r                                      viewIdea.update()\r                                    })\r                                }}\r                              >\r                                Choose\r                              </Button>\r                            </Popover.Content>\r                          </Popover>\r                        }\r                      >\r                        <Button variant=\"info\">Choose announcement</Button>\r                      </OverlayTrigger>\r                    ) : (\r                      <div />\r                    )}\r                    {idea.author === auth.username &&\r                    idea.status === 'await' &&\r                    an.status === 'chosen' ? (\r                      <OverlayTrigger\r                        trigger=\"click\"\r                        rootClose\r                        placement=\"bottom\"\r                        overlay={\r                          <Popover id=\"popover-contained\">\r                            <Popover.Title as=\"h3\">\r                              Popover bottom\r                            </Popover.Title>\r                            <Popover.Content data-trigger=\"focus\">\r                              <Form.Control\r                                as=\"textarea\"\r                                rows={3}\r                                onChange={(event: any) =>\r                                  setResult(event.target.value)\r                                }\r                                value={result}\r                              />\r                              <Button\r                                variant=\"success\"\r                                className=\"m-1\"\r                                onClick={() => {\r                                  auth.send\r                                    .post('result/create', {\r                                      ideaname: idea.ideaname,\r                                      anname: an.anname,\r                                      comment: result,\r                                    })\r                                    .then(() => {\r                                      viewIdea.update()\r                                    })\r                                }}\r                              >\r                                Complete\r                              </Button>\r                            </Popover.Content>\r                          </Popover>\r                        }\r                      >\r                        <Button variant=\"info\">Complete idea</Button>\r                      </OverlayTrigger>\r                    ) : (\r                      <div />\r                    )}\r                  </Card.Body>\r                  <Card.Footer>\r                    <Accordion.Toggle\r                      className=\"hover\"\r                      as={Card.Header}\r                      onClick={() => acc.toggle(i)}\r                      eventKey={i.toString()}\r                    >\r                      {acc.get(i).visible === 'show'\r                        ? 'Hide comments'\r                        : 'Show comments'}\r                    </Accordion.Toggle>\r                    <Accordion.Collapse\r                      className={acc.get(i).visible}\r                      eventKey={i.toString()}\r                    >\r                      <Container>\r                        <div className=\"m-2\">\r                          {an.comments.map((co) => (\r                            <Row>\r                              <Col>\r                                <span className=\"font-italic\">\r                                  {co.author}:&#160;\r                                </span>\r                                <Badge\r                                  variant=\"secondary\"\r                                  className=\"w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25\"\r                                >\r                                  {co.text}\r                                </Badge>\r                              </Col>\r                            </Row>\r                          ))}\r                        </div>\r                        <Row>\r                          <Col>\r                            <Form.Control\r                              as=\"textarea\"\r                              rows={3}\r                              onChange={(event: any) =>\r                                acc.handleChangeComment(i, event)\r                              }\r                              value={acc.get(i).comment}\r                            />\r                          </Col>\r                        </Row>\r                        <Row>\r                          <Col>\r                            <Button\r                              className=\"m-2\"\r                              variant=\"secondary\"\r                              onClick={() => {\r                                auth.send\r                                  .post('announcement/createcomment', {\r                                    anname: an.anname,\r                                    text: acc.get(i).comment,\r                                  })\r                                  .then(() => {\r                                    console.log('then branch')\r                                    viewIdea.update()\r                                    acc.handleClearComment(i)\r                                  })\r                                  .catch((err: any) => {\r                                    console.log('catch')\r                                    acc.setError(err.response.data.message, i)\r                                  })\r                              }}\r                            >\r                              New Comment\r                            </Button>\r                          </Col>\r                        </Row>\r                        {acc.get(i).errors.map((error) => (\r                          <Row>\r                            <Col>\r                              <Alert className=\"mx-2 mb-2\" variant=\"danger\">\r                                {error}\r                              </Alert>\r                            </Col>\r                          </Row>\r                        ))}\r                      </Container>\r                    </Accordion.Collapse>\r                  </Card.Footer>\r                </Card>\r              </Carousel.Item>\r            ))}\r          </Carousel>\r        </Col>\r      </Row>\r      <Row className=\"d-none d-md-flex\">\r        {announcements.map((an, i) => (\r          <Col>\r            <Card style={{ width: '18rem' }}>\r              <Card.Body>\r                {an.status === 'chosen' ? (\r                  <Alert variant=\"primary\">This announcement chosen</Alert>\r                ) : (\r                  <></>\r                )}\r                {an.status === 'complete' ? (\r                  <Alert variant=\"primary\">Announcement complete</Alert>\r                ) : (\r                  <></>\r                )}\r                <Card.Title>{an.anname}</Card.Title>\r                <Card.Subtitle className=\"mb-2 text-muted\">\r                  {an.username}\r                </Card.Subtitle>\r                <Card.Text>{an.short_desc}</Card.Text>\r                <Container>\r                  <Row>\r                    {an.tags.map((tag) => (\r                      <Col sm=\"auto\">\r                        <Badge\r                          variant=\"secondary\"\r                          className=\"w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25\"\r                        >\r                          {tag}\r                        </Badge>\r                      </Col>\r                    ))}\r                  </Row>\r                </Container>\r                {idea.author === auth.username && idea.status === 'new' ? (\r                  <OverlayTrigger\r                    trigger=\"click\"\r                    rootClose\r                    placement=\"bottom\"\r                    overlay={\r                      <Popover id=\"popover-contained\">\r                        <Popover.Title as=\"h3\">Popover bottom</Popover.Title>\r                        <Popover.Content data-trigger=\"focus\">\r                          <Button\r                            variant=\"success\"\r                            className=\"m-1\"\r                            onClick={() => {\r                              auth.send\r                                .post('announcement/choose', {\r                                  ideaname: idea.ideaname,\r                                  anname: an.anname,\r                                })\r                                .then(() => {\r                                  viewIdea.update()\r                                })\r                            }}\r                          >\r                            Choose\r                          </Button>\r                        </Popover.Content>\r                      </Popover>\r                    }\r                  >\r                    <Button variant=\"info\">Choose announcement</Button>\r                  </OverlayTrigger>\r                ) : (\r                  <div />\r                )}\r                {idea.author === auth.username &&\r                idea.status === 'await' &&\r                an.status === 'chosen' ? (\r                  <OverlayTrigger\r                    trigger=\"click\"\r                    rootClose\r                    placement=\"bottom\"\r                    overlay={\r                      <Popover id=\"popover-contained\">\r                        <Popover.Title as=\"h3\">Popover bottom</Popover.Title>\r                        <Popover.Content data-trigger=\"focus\">\r                          <Form.Control\r                            as=\"textarea\"\r                            rows={3}\r                            onChange={(event: any) =>\r                              setResult(event.target.value)\r                            }\r                            value={result}\r                          />\r                          <Button\r                            variant=\"success\"\r                            className=\"m-1\"\r                            onClick={() => {\r                              auth.send\r                                .post('result/create', {\r                                  ideaname: idea.ideaname,\r                                  anname: an.anname,\r                                  comment: result,\r                                })\r                                .then(() => {\r                                  viewIdea.update()\r                                })\r                            }}\r                          >\r                            Complete\r                          </Button>\r                        </Popover.Content>\r                      </Popover>\r                    }\r                  >\r                    <Button variant=\"info\">Complete idea</Button>\r                  </OverlayTrigger>\r                ) : (\r                  <div />\r                )}\r              </Card.Body>\r              <Card.Footer>\r                <Accordion.Toggle\r                  className=\"hover\"\r                  as={Card.Header}\r                  onClick={() => acc.toggle(i)}\r                  eventKey={i.toString()}\r                >\r                  {acc.get(i).visible === 'show'\r                    ? 'Hide comments'\r                    : 'Show comments'}\r                </Accordion.Toggle>\r                <Accordion.Collapse\r                  className={acc.get(i).visible}\r                  eventKey={i.toString()}\r                >\r                  <Container>\r                    <div className=\"m-2\">\r                      {an.comments.map((co) => (\r                        <Row>\r                          <Col>\r                            <span className=\"font-italic\">\r                              {co.author}:&#160;\r                            </span>\r                            <Badge\r                              variant=\"secondary\"\r                              className=\"w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25\"\r                            >\r                              {co.text}\r                            </Badge>\r                          </Col>\r                        </Row>\r                      ))}\r                    </div>\r                    <Row>\r                      <Col>\r                        <Form.Control\r                          as=\"textarea\"\r                          rows={3}\r                          onChange={(event: any) =>\r                            acc.handleChangeComment(i, event)\r                          }\r                          value={acc.get(i).comment}\r                        />\r                      </Col>\r                    </Row>\r                    <Row>\r                      <Col>\r                        <Button\r                          className=\"m-2\"\r                          variant=\"secondary\"\r                          onClick={() => {\r                            auth.send\r                              .post('announcement/createcomment', {\r                                anname: an.anname,\r                                text: acc.get(i).comment,\r                              })\r                              .then(() => {\r                                console.log('then branch')\r                                viewIdea.update()\r                                acc.handleClearComment(i)\r                              })\r                              .catch((err: any) => {\r                                console.log('catch')\r                                acc.setError(err.response.data.message, i)\r                              })\r                          }}\r                        >\r                          New Comment\r                        </Button>\r                      </Col>\r                    </Row>\r                    {acc.get(i).errors.map((error) => (\r                      <Row>\r                        <Col>\r                          <Alert className=\"mx-2 mb-2\" variant=\"danger\">\r                            {error}\r                          </Alert>\r                        </Col>\r                      </Row>\r                    ))}\r                  </Container>\r                </Accordion.Collapse>\r              </Card.Footer>\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      {idea.status !== 'complete' ? (\r        <Row className=\"p-3\">\r          <Col sm=\"auto\">\r            <NavLink\r              className=\"btn btn-secondary\"\r              to={'/addannaoncement/' + id.toString()}\r            >\r              Add annonuncement\r            </NavLink>\r          </Col>\r        </Row>\r      ) : (\r        <Row>\r          <Col>\r            <Alert variant=\"secondary\">\r              {\"Client's comment: \" + viewIdea.result}\r            </Alert>\r          </Col>\r        </Row>\r      )}\r    </Container>\r  )\r})\r","import React, { useState } from 'react'\rimport { observer } from 'mobx-react-lite'\rimport { action, makeAutoObservable, observable } from 'mobx'\r\rimport Container from 'react-bootstrap/Container'\rimport Row from 'react-bootstrap/Row'\rimport Col from 'react-bootstrap/Col'\rimport Form from 'react-bootstrap/Form'\rimport Button from 'react-bootstrap/Button'\rimport Toast from 'react-bootstrap/Toast'\rimport Badge from 'react-bootstrap/Badge'\rimport Alert from 'react-bootstrap/Alert'\r\rimport { auth } from '../features/auth'\rimport { useParams } from 'react-router-dom'\r\rclass Result {\r  @observable msg = ''\r  @observable variant = 'success'\r  @observable visible = false\r\r  @action setMsg(value: string) {\r    this.msg = value\r  }\r  @action setVariant(value: string) {\r    this.variant = value\r  }\r\r  @action show() {\r    console.log('show')\r    this.visible = true\r  }\r  @action hide() {\r    console.log('hide')\r    this.visible = false\r  }\r\r  constructor() {\r    makeAutoObservable(this, {}, { autoBind: true })\r  }\r}\r\rclass Taglist {\r  @observable tags = new Array<string>(0)\r  @observable candidate = ''\r\r  setCandidate(value: string) {\r    this.candidate = value\r  }\r\r  addTag(value: string) {\r    this.tags.push(value)\r  }\r\r  deliteTag(value: string) {\r    this.tags.splice(\r      this.tags.findIndex((elem) => elem === value),\r      1,\r    )\r  }\r\r  clear() {\r    this.tags = []\r    this.candidate = ''\r  }\r\r  acceptCandidate() {\r    if (this.candidate !== '') {\r      this.addTag(this.candidate)\r      this.candidate = ''\r    }\r  }\r\r  constructor() {\r    makeAutoObservable(this, {}, { autoBind: true })\r  }\r}\r\rexport const AddAnnouncementPage = observer(() => {\r  const id = useParams<{ id: string }>().id\r\r  const [result] = useState(new Result())\r  const [taglist] = useState(new Taglist())\r\r  const [form, setForm] = useState({\r    anname: '',\r    short_desc: '',\r    text: '',\r    link: '',\r  })\r\r  const [msg, setMsg] = useState({\r    ideaname: [],\r    anname: [],\r    short_desc: [],\r    text: [],\r    tags: [],\r    link: [],\r  })\r\r  const focusHandler = () => {\r    result.hide()\r  }\r\r  const changeHandler = (event: any) => {\r    setForm({\r      ...form,\r      [event.target.name]: event.target.value,\r    })\r    result.hide()\r  }\r\r  const changeTagsHandler = (event: any) => {\r    const chars = event.target.value\r    if (/^[A-Za-z0-9]/.test(chars)) {\r      taglist.setCandidate(chars)\r    }\r    if (/ $/.test(chars)) {\r      taglist.acceptCandidate()\r    }\r    result.hide()\r  }\r\r  const blurTagsHandler = () => {\r    taglist.acceptCandidate()\r  }\r\r  const handleAdd = async () => {\r    taglist.acceptCandidate()\r    auth.send\r      .post('/announcement/create', {\r        ...form,\r        tags: taglist.tags,\r        id: parseInt(id),\r      })\r      .then((res: any) => {\r        setMsg({\r          ideaname: [],\r          anname: [],\r          short_desc: [],\r          text: [],\r          tags: [],\r          link: [],\r        })\r        setForm({ anname: '', short_desc: '', text: '', link: '' })\r        taglist.clear()\r        result.setMsg(res.data.message)\r        result.setVariant('success')\r        result.show()\r      })\r      .catch((err: any) => {\r        setMsg(\r          Object.keys(msg).reduce(\r            (acc: any, key: string) => {\r              acc[key] = err.response.data.message.filter((s: string) =>\r                s.includes(key),\r              )\r              return acc\r            },\r            {\r              ideaname: [],\r              anname: [],\r              short_desc: [],\r              text: [],\r              tags: [],\r              link: [],\r            },\r          ),\r        )\r        result.setMsg('Errors, see detailes above')\r        result.setVariant('danger')\r        result.show()\r      })\r  }\r\r  const keyUpHandler = (event: any) => {\r    if (event.charCode === 13) {\r      taglist.acceptCandidate()\r    }\r    if (event.charCode === 27) {\r      taglist.setCandidate('')\r    }\r  }\r\r  return (\r    <Container>\r      <Row>\r        {msg.ideaname.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in idea name</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"describtion\">\r            <Form.Label>Announcement name</Form.Label>\r            <Form.Control\r              name=\"anname\"\r              type=\"text\"\r              placeholder=\"Announcement name\"\r              value={form.anname}\r              onChange={changeHandler}\r              onFocus={focusHandler}\r            />\r          </Form.Group>\r        </Col>\r        {msg.anname.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in describtion</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"short_desc\">\r            <Form.Label>Short describtion</Form.Label>\r            <Form.Control\r              name=\"short_desc\"\r              type=\"text\"\r              placeholder=\"short description\"\r              value={form.short_desc}\r              onChange={changeHandler}\r              onFocus={focusHandler}\r            />\r          </Form.Group>\r        </Col>\r        {msg.short_desc.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in short description</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"link\">\r            <Form.Label>Text</Form.Label>\r            <Form.Control\r              name=\"text\"\r              type=\"text\"\r              placeholder=\"Text\"\r              value={form.text}\r              onChange={changeHandler}\r              onFocus={focusHandler}\r            />\r          </Form.Group>\r        </Col>\r        {msg.text.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in text</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"tags_cont\">\r            <Form.Label>Tags</Form.Label>\r            <Form.Control\r              type=\"text\"\r              placeholder=\"Tags\"\r              as=\"div\"\r              className=\"p-0\"\r            >\r              <Row className=\"m-0 h-100\">\r                {taglist.tags.map((tag) => (\r                  <Col sm=\"auto\">\r                    <Badge\r                      variant=\"secondary\"\r                      className=\"hover w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25\"\r                      onClick={() => {\r                        taglist.deliteTag(tag)\r                      }}\r                    >\r                      {tag}\r                    </Badge>\r                  </Col>\r                ))}\r                <Col className=\"p-0\">\r                  <input\r                    id=\"tags\"\r                    type=\"text\"\r                    name=\"tags\"\r                    value={taglist.candidate}\r                    onChange={changeTagsHandler}\r                    onFocus={focusHandler}\r                    onBlur={blurTagsHandler}\r                    onKeyPress={keyUpHandler}\r                    className=\"w-100 h-100 border-0\"\r                  />\r                </Col>\r              </Row>\r            </Form.Control>\r          </Form.Group>\r        </Col>\r        {msg.tags.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in tags</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row>\r        <Col>\r          <Form.Group controlId=\"link\">\r            <Form.Label>Link</Form.Label>\r            <Form.Control\r              name=\"text\"\r              type=\"text\"\r              placeholder=\"link\"\r              value={form.link}\r              onChange={changeHandler}\r              onFocus={focusHandler}\r            />\r          </Form.Group>\r        </Col>\r        {msg.link.map((err) => (\r          <Toast>\r            <Col>\r              <Toast.Header closeButton={false}>\r                <strong className=\"mr-auto\">Error in link</strong>\r              </Toast.Header>\r              <Toast.Body>{err}</Toast.Body>\r            </Col>\r          </Toast>\r        ))}\r      </Row>\r      <Row className=\"justify-content-evenly\">\r        <Col>\r          <Button id=\"register\" variant=\"secondary\" onClick={handleAdd}>\r            Create\r          </Button>\r        </Col>\r      </Row>\r      <Row>\r        <Col>\r          <Alert variant={result.variant} show={result.visible}>\r            {result.msg}\r          </Alert>\r        </Col>\r      </Row>\r    </Container>\r  )\r})\r","import React, { useEffect } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport { AddUserPage } from './pages/addUserPage'\r\nimport { Menu } from './componenst/Menu'\r\nimport { LoginPage } from './pages/loginPage'\r\nimport { AboutPage } from './pages/aboutPage'\r\nimport { AddIdeaPage } from './pages/addIdeaPage'\r\nimport { IdeasPage } from './pages/ideasPage'\r\nimport { ideas } from './features/ideas'\r\nimport { ModalLogin } from './componenst/ModalLogin'\r\nimport { viewIdea } from './features/viewIdea'\r\nimport { ViewIdeaPage } from './pages/viewIdeaPage'\r\nimport { AddAnnouncementPage } from './pages/addAnnouncementPage'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nconst updCycle = async () => {\r\n  const sleep = (ms: number) =>\r\n    new Promise((resolve) => setTimeout(resolve, ms))\r\n  while (true) {\r\n    if (ideas.auto) {\r\n      ideas.update()\r\n    }\r\n    if (viewIdea.auto) {\r\n      viewIdea.update()\r\n    }\r\n    await sleep(10000)\r\n  }\r\n}\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    updCycle()\r\n  }, [])\r\n\r\n  return (\r\n    <Router basename=\"/ij/\">\r\n      <ModalLogin />\r\n      <Container fluid className=\"min-vh-100\">\r\n        <Row>\r\n          <Col className=\"p-0\">\r\n            <Menu />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className=\"p-0\">\r\n            <Switch>\r\n              {/*change to something else*/}\r\n              <Route exact path=\"/\" component={LoginPage} />\r\n              <Route exact path=\"/addidea\" component={AddIdeaPage} />\r\n              <Route\r\n                path=\"/addannaoncement/:id\"\r\n                component={AddAnnouncementPage}\r\n              />\r\n              <Route exact path=\"/ideas\" component={IdeasPage} />\r\n              <Route exact path=\"/login\" component={LoginPage} />\r\n              <Route exact path=\"/about\" component={AboutPage} />\r\n              <Route exact path=\"/register\" component={AddUserPage} />\r\n              <Route path=\"/ideafull/:id\" component={ViewIdeaPage} />\r\n            </Switch>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport './index.scss'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Helmet>\r\n      <link\r\n        href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n        rel=\"stylesheet\"\r\n      />\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n      <title>Forecast trading emulator</title>\r\n      <base href=\"/ij/\" />\r\n    </Helmet>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass send function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}