import {  action,  configure,  makeAutoObservable,  observable,  runInAction,} from 'mobx'import { auth } from './auth'export interface Idea {  author: string  ideaname: string  short_desc: string  tags: string[]  status: string}configure({ enforceActions: 'observed' })export class Ideas {  @observable id = 0  @observable ideas = new Array<Idea>(0)  @observable auto = false  @action update() {    auth.send      .get('/idea/listall')      .then((res) => {        runInAction(async () => {          // this.ideas = res.data.list          this.id = 1          // this.ideas.concat(res.data.list)          // console.log(this.ideas[0])        })      })      .catch(() => console.log('update error'))  }  @action setAuto(value: boolean) {    this.auto = value  }  constructor() {    makeAutoObservable(this, {}, { autoBind: true })  }}export const ideas = new Ideas()