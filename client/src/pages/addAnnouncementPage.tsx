import React, { useState } from 'react'import { observer } from 'mobx-react-lite'import { action, makeAutoObservable, observable } from 'mobx'import Container from 'react-bootstrap/Container'import Row from 'react-bootstrap/Row'import Col from 'react-bootstrap/Col'import Form from 'react-bootstrap/Form'import Button from 'react-bootstrap/Button'import Toast from 'react-bootstrap/Toast'import Badge from 'react-bootstrap/Badge'import Alert from 'react-bootstrap/Alert'import { auth } from '../features/auth'import { useParams } from 'react-router-dom'class Result {  @observable msg = ''  @observable variant = 'success'  @observable visible = false  @action setMsg(value: string) {    this.msg = value  }  @action setVariant(value: string) {    this.variant = value  }  @action show() {    console.log('show')    this.visible = true  }  @action hide() {    console.log('hide')    this.visible = false  }  constructor() {    makeAutoObservable(this, {}, { autoBind: true })  }}class Taglist {  @observable tags = new Array<string>(0)  @observable candidate = ''  setCandidate(value: string) {    this.candidate = value  }  addTag(value: string) {    this.tags.push(value)  }  deliteTag(value: string) {    this.tags.splice(      this.tags.findIndex((elem) => elem === value),      1,    )  }  clear() {    this.tags = []    this.candidate = ''  }  acceptCandidate() {    if (this.candidate !== '') {      this.addTag(this.candidate)      this.candidate = ''    }  }  constructor() {    makeAutoObservable(this, {}, { autoBind: true })  }}export const AddAnnouncementPage = observer(() => {  const id = useParams<{ id: string }>().id  const [result] = useState(new Result())  const [taglist] = useState(new Taglist())  const [form, setForm] = useState({    anname: '',    short_desc: '',    text: '',    link: '',  })  const [msg, setMsg] = useState({    ideaname: [],    anname: [],    short_desc: [],    text: [],    tags: [],    link: [],  })  const focusHandler = () => {    result.hide()  }  const changeHandler = (event: any) => {    setForm({      ...form,      [event.target.name]: event.target.value,    })    result.hide()  }  const changeTagsHandler = (event: any) => {    const chars = event.target.value    if (/^[A-Za-z0-9]/.test(chars)) {      taglist.setCandidate(chars)    }    if (/ $/.test(chars)) {      taglist.acceptCandidate()    }    result.hide()  }  const blurTagsHandler = () => {    taglist.acceptCandidate()  }  const handleAdd = async () => {    taglist.acceptCandidate()    auth.send      .post('/announcement/create', {        ...form,        tags: taglist.tags,        id: parseInt(id),      })      .then((res: any) => {        setMsg({          ideaname: [],          anname: [],          short_desc: [],          text: [],          tags: [],          link: [],        })        setForm({ anname: '', short_desc: '', text: '', link: '' })        taglist.clear()        result.setMsg(res.data.message)        result.setVariant('success')        result.show()      })      .catch((err: any) => {        setMsg(          Object.keys(msg).reduce(            (acc: any, key: string) => {              acc[key] = err.response.data.message.filter((s: string) =>                s.includes(key),              )              return acc            },            {              ideaname: [],              anname: [],              short_desc: [],              text: [],              tags: [],              link: [],            },          ),        )        result.setMsg('Errors, see detailes above')        result.setVariant('danger')        result.show()      })  }  const keyUpHandler = (event: any) => {    if (event.charCode === 13) {      taglist.acceptCandidate()    }    if (event.charCode === 27) {      taglist.setCandidate('')    }  }  return (    <Container>      <Row>        {msg.ideaname.map((err) => (          <Toast>            <Col>              <Toast.Header closeButton={false}>                <strong className="mr-auto">Error in idea name</strong>              </Toast.Header>              <Toast.Body>{err}</Toast.Body>            </Col>          </Toast>        ))}      </Row>      <Row>        <Col>          <Form.Group controlId="describtion">            <Form.Label>Announcement name</Form.Label>            <Form.Control              name="anname"              type="text"              placeholder="Announcement name"              value={form.anname}              onChange={changeHandler}              onFocus={focusHandler}            />          </Form.Group>        </Col>        {msg.anname.map((err) => (          <Toast>            <Col>              <Toast.Header closeButton={false}>                <strong className="mr-auto">Error in describtion</strong>              </Toast.Header>              <Toast.Body>{err}</Toast.Body>            </Col>          </Toast>        ))}      </Row>      <Row>        <Col>          <Form.Group controlId="short_desc">            <Form.Label>Short describtion</Form.Label>            <Form.Control              name="short_desc"              type="text"              placeholder="short description"              value={form.short_desc}              onChange={changeHandler}              onFocus={focusHandler}            />          </Form.Group>        </Col>        {msg.short_desc.map((err) => (          <Toast>            <Col>              <Toast.Header closeButton={false}>                <strong className="mr-auto">Error in short description</strong>              </Toast.Header>              <Toast.Body>{err}</Toast.Body>            </Col>          </Toast>        ))}      </Row>      <Row>        <Col>          <Form.Group controlId="link">            <Form.Label>Text</Form.Label>            <Form.Control              name="text"              type="text"              placeholder="Text"              value={form.text}              onChange={changeHandler}              onFocus={focusHandler}            />          </Form.Group>        </Col>        {msg.text.map((err) => (          <Toast>            <Col>              <Toast.Header closeButton={false}>                <strong className="mr-auto">Error in text</strong>              </Toast.Header>              <Toast.Body>{err}</Toast.Body>            </Col>          </Toast>        ))}      </Row>      <Row>        <Col>          <Form.Group controlId="tags_cont">            <Form.Label>Tags</Form.Label>            <Form.Control              type="text"              placeholder="Tags"              as="div"              className="p-0"            >              <Row className="m-0 h-100">                {taglist.tags.map((tag) => (                  <Col sm="auto">                    <Badge                      variant="secondary"                      className="hover w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25"                      onClick={() => {                        taglist.deliteTag(tag)                      }}                    >                      {tag}                    </Badge>                  </Col>                ))}                <Col className="p-0">                  <input                    id="tags"                    type="text"                    name="tags"                    value={taglist.candidate}                    onChange={changeTagsHandler}                    onFocus={focusHandler}                    onBlur={blurTagsHandler}                    onKeyPress={keyUpHandler}                    className="w-100 h-100 border-0"                  />                </Col>              </Row>            </Form.Control>          </Form.Group>        </Col>        {msg.tags.map((err) => (          <Toast>            <Col>              <Toast.Header closeButton={false}>                <strong className="mr-auto">Error in tags</strong>              </Toast.Header>              <Toast.Body>{err}</Toast.Body>            </Col>          </Toast>        ))}      </Row>      <Row>        <Col>          <Form.Group controlId="link">            <Form.Label>Link</Form.Label>            <Form.Control              name="text"              type="text"              placeholder="link"              value={form.link}              onChange={changeHandler}              onFocus={focusHandler}            />          </Form.Group>        </Col>        {msg.link.map((err) => (          <Toast>            <Col>              <Toast.Header closeButton={false}>                <strong className="mr-auto">Error in link</strong>              </Toast.Header>              <Toast.Body>{err}</Toast.Body>            </Col>          </Toast>        ))}      </Row>      <Row className="justify-content-evenly">        <Col>          <Button id="register" variant="secondary" onClick={handleAdd}>            Create          </Button>        </Col>      </Row>      <Row>        <Col>          <Alert variant={result.variant} show={result.visible}>            {result.msg}          </Alert>        </Col>      </Row>    </Container>  )})