import React, { useEffect, useState } from 'react'import { observer } from 'mobx-react-lite'import { useParams, NavLink } from 'react-router-dom'import Button from 'react-bootstrap/Button'import Badge from 'react-bootstrap/Badge'import Accordion from 'react-bootstrap/Accordion'import Alert from 'react-bootstrap/Alert'import Card from 'react-bootstrap/Card'import Popover from 'react-bootstrap/Popover'import OverlayTrigger from 'react-bootstrap/OverlayTrigger'import Form from 'react-bootstrap/Form'import Carousel from 'react-bootstrap/Carousel'import Container from 'react-bootstrap/Container'import Row from 'react-bootstrap/Row'import Col from 'react-bootstrap/Col'import { Announcement, viewIdea } from '../features/viewIdea'import { action, makeAutoObservable, observable } from 'mobx'import { auth } from '../features/auth'interface ann_com {  visible: string  comment: string  errors: string[]}class Acc {  @observable n = new Map<number, ann_com>()  get(i: number): ann_com {    if (this.n.get(i) === undefined) {      this.n.set(i, { visible: '', comment: '', errors: [] })    }    // @ts-ignore    return this.n.get<ann_com>(i)  }  @action handleChangeComment(i: number, event: any) {    this.n.set(i, {      visible: this.get(i).visible,      comment: event.target.value,      errors: [],    })  }  @action handleClearComment(i: number) {    this.n.set(i, {      visible: this.get(i).visible,      comment: '',      errors: [],    })  }  @action setError(error: string[], i: number) {    console.log('setError: ', error)    this.n.set(i, {      visible: this.get(i).visible,      comment: this.get(i).comment,      errors: error,    })  }  @action toggle(i: number) {    const a = this.get(i).visible    if (a === '') {      this.n.set(i, {        visible: 'show',        comment: this.get(i).comment,        errors: this.get(i).errors,      })    } else {      this.n.set(i, {        visible: '',        comment: this.get(i).comment,        errors: this.get(i).errors,      })    }  }  constructor() {    makeAutoObservable(this, {}, { autoBind: true })  }}export const ViewIdeaPage = observer(() => {  const id = useParams<{ id: string }>().id  const idea = viewIdea.idea  const announcements: Announcement[] = viewIdea.an  const [acc] = useState(new Acc())  const [result, setResult] = useState('')  useEffect(() => {    viewIdea.setID(parseInt(id))    viewIdea.update()    viewIdea.setAuto(true)    return () => {      viewIdea.setAuto(false)      viewIdea.clean()      viewIdea.setID(0)    }  }, [])  return (    <Container fluid>      {idea.status === 'complete' ? (        <Row>          <Col>            <Alert variant="primary">Idea complete</Alert>          </Col>        </Row>      ) : (        <></>      )}      <Row>        <Col>          <Badge variant="info">{idea.ideaname}</Badge>        </Col>      </Row>      <Row>        <Col>          <Badge variant="light">{idea.short_desc}</Badge>        </Col>      </Row>      <Row>        <Col>{idea.author}</Col>      </Row>      <Row>        <Col>{idea.describtion}</Col>      </Row>      <Row>        <Col>          <a href={idea.link}>{idea.link}</a>        </Col>      </Row>      <Row>        {idea.tags.map((tag) => (          <Col sm="auto">            <Badge              variant="secondary"              className="w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25"            >              {tag}            </Badge>          </Col>        ))}      </Row>      <Row className="d-flex d-md-none">        <Col>          <Carousel controls={true}>            {announcements.map((an, i) => (              <Carousel.Item>                <Card style={{ width: '18rem' }}>                  <Card.Body>                    {an.status === 'chosen' ? (                      <Alert variant="primary">This announcement chosen</Alert>                    ) : (                      <></>                    )}                    {an.status === 'complete' ? (                      <Alert variant="primary">Announcement complete</Alert>                    ) : (                      <></>                    )}                    <Card.Title>{an.anname}</Card.Title>                    <Card.Subtitle className="mb-2 text-muted">                      {an.username}                    </Card.Subtitle>                    <Card.Text>{an.short_desc}</Card.Text>                    <Container>                      <Row>                        {an.tags.map((tag) => (                          <Col sm="auto">                            <Badge                              variant="secondary"                              className="w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25"                            >                              {tag}                            </Badge>                          </Col>                        ))}                      </Row>                    </Container>                    {idea.author === auth.username && idea.status === 'new' ? (                      <OverlayTrigger                        trigger="click"                        rootClose                        placement="bottom"                        overlay={                          <Popover id="popover-contained">                            <Popover.Title as="h3">                              Popover bottom                            </Popover.Title>                            <Popover.Content data-trigger="focus">                              <Button                                variant="success"                                className="m-1"                                onClick={() => {                                  auth.send                                    .post('announcement/choose', {                                      ideaname: idea.ideaname,                                      anname: an.anname,                                    })                                    .then(() => {                                      viewIdea.update()                                    })                                }}                              >                                Choose                              </Button>                            </Popover.Content>                          </Popover>                        }                      >                        <Button variant="info">Choose announcement</Button>                      </OverlayTrigger>                    ) : (                      <div />                    )}                    {idea.author === auth.username &&                    idea.status === 'await' &&                    an.status === 'chosen' ? (                      <OverlayTrigger                        trigger="click"                        rootClose                        placement="bottom"                        overlay={                          <Popover id="popover-contained">                            <Popover.Title as="h3">                              Popover bottom                            </Popover.Title>                            <Popover.Content data-trigger="focus">                              <Form.Control                                as="textarea"                                rows={3}                                onChange={(event: any) =>                                  setResult(event.target.value)                                }                                value={result}                              />                              <Button                                variant="success"                                className="m-1"                                onClick={() => {                                  auth.send                                    .post('result/create', {                                      ideaname: idea.ideaname,                                      anname: an.anname,                                      comment: result,                                    })                                    .then(() => {                                      viewIdea.update()                                    })                                }}                              >                                Complete                              </Button>                            </Popover.Content>                          </Popover>                        }                      >                        <Button variant="info">Complete idea</Button>                      </OverlayTrigger>                    ) : (                      <div />                    )}                  </Card.Body>                  <Card.Footer>                    <Accordion.Toggle                      className="hover"                      as={Card.Header}                      onClick={() => acc.toggle(i)}                      eventKey={i.toString()}                    >                      {acc.get(i).visible === 'show'                        ? 'Hide comments'                        : 'Show comments'}                    </Accordion.Toggle>                    <Accordion.Collapse                      className={acc.get(i).visible}                      eventKey={i.toString()}                    >                      <Container>                        <div className="m-2">                          {an.comments.map((co) => (                            <Row>                              <Col>                                <span className="font-italic">                                  {co.author}:&#160;                                </span>                                <Badge                                  variant="secondary"                                  className="w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25"                                >                                  {co.text}                                </Badge>                              </Col>                            </Row>                          ))}                        </div>                        <Row>                          <Col>                            <Form.Control                              as="textarea"                              rows={3}                              onChange={(event: any) =>                                acc.handleChangeComment(i, event)                              }                              value={acc.get(i).comment}                            />                          </Col>                        </Row>                        <Row>                          <Col>                            <Button                              className="m-2"                              variant="secondary"                              onClick={() => {                                auth.send                                  .post('announcement/createcomment', {                                    anname: an.anname,                                    text: acc.get(i).comment,                                  })                                  .then(() => {                                    console.log('then branch')                                    viewIdea.update()                                    acc.handleClearComment(i)                                  })                                  .catch((err: any) => {                                    console.log('catch')                                    acc.setError(err.response.data.message, i)                                  })                              }}                            >                              New Comment                            </Button>                          </Col>                        </Row>                        {acc.get(i).errors.map((error) => (                          <Row>                            <Col>                              <Alert className="mx-2 mb-2" variant="danger">                                {error}                              </Alert>                            </Col>                          </Row>                        ))}                      </Container>                    </Accordion.Collapse>                  </Card.Footer>                </Card>              </Carousel.Item>            ))}          </Carousel>        </Col>      </Row>      <Row className="d-none d-md-flex">        {announcements.map((an, i) => (          <Col>            <Card style={{ width: '18rem' }}>              <Card.Body>                {an.status === 'chosen' ? (                  <Alert variant="primary">This announcement chosen</Alert>                ) : (                  <></>                )}                {an.status === 'complete' ? (                  <Alert variant="primary">Announcement complete</Alert>                ) : (                  <></>                )}                <Card.Title>{an.anname}</Card.Title>                <Card.Subtitle className="mb-2 text-muted">                  {an.username}                </Card.Subtitle>                <Card.Text>{an.short_desc}</Card.Text>                <Container>                  <Row>                    {an.tags.map((tag) => (                      <Col sm="auto">                        <Badge                          variant="secondary"                          className="w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25"                        >                          {tag}                        </Badge>                      </Col>                    ))}                  </Row>                </Container>                {idea.author === auth.username && idea.status === 'new' ? (                  <OverlayTrigger                    trigger="click"                    rootClose                    placement="bottom"                    overlay={                      <Popover id="popover-contained">                        <Popover.Title as="h3">Popover bottom</Popover.Title>                        <Popover.Content data-trigger="focus">                          <Button                            variant="success"                            className="m-1"                            onClick={() => {                              auth.send                                .post('announcement/choose', {                                  ideaname: idea.ideaname,                                  anname: an.anname,                                })                                .then(() => {                                  viewIdea.update()                                })                            }}                          >                            Choose                          </Button>                        </Popover.Content>                      </Popover>                    }                  >                    <Button variant="info">Choose announcement</Button>                  </OverlayTrigger>                ) : (                  <div />                )}                {idea.author === auth.username &&                idea.status === 'await' &&                an.status === 'chosen' ? (                  <OverlayTrigger                    trigger="click"                    rootClose                    placement="bottom"                    overlay={                      <Popover id="popover-contained">                        <Popover.Title as="h3">Popover bottom</Popover.Title>                        <Popover.Content data-trigger="focus">                          <Form.Control                            as="textarea"                            rows={3}                            onChange={(event: any) =>                              setResult(event.target.value)                            }                            value={result}                          />                          <Button                            variant="success"                            className="m-1"                            onClick={() => {                              auth.send                                .post('result/create', {                                  ideaname: idea.ideaname,                                  anname: an.anname,                                  comment: result,                                })                                .then(() => {                                  viewIdea.update()                                })                            }}                          >                            Complete                          </Button>                        </Popover.Content>                      </Popover>                    }                  >                    <Button variant="info">Complete idea</Button>                  </OverlayTrigger>                ) : (                  <div />                )}              </Card.Body>              <Card.Footer>                <Accordion.Toggle                  className="hover"                  as={Card.Header}                  onClick={() => acc.toggle(i)}                  eventKey={i.toString()}                >                  {acc.get(i).visible === 'show'                    ? 'Hide comments'                    : 'Show comments'}                </Accordion.Toggle>                <Accordion.Collapse                  className={acc.get(i).visible}                  eventKey={i.toString()}                >                  <Container>                    <div className="m-2">                      {an.comments.map((co) => (                        <Row>                          <Col>                            <span className="font-italic">                              {co.author}:&#160;                            </span>                            <Badge                              variant="secondary"                              className="w-auto h-75 mt-1 mb-1 align-middle pl-25 pr-25"                            >                              {co.text}                            </Badge>                          </Col>                        </Row>                      ))}                    </div>                    <Row>                      <Col>                        <Form.Control                          as="textarea"                          rows={3}                          onChange={(event: any) =>                            acc.handleChangeComment(i, event)                          }                          value={acc.get(i).comment}                        />                      </Col>                    </Row>                    <Row>                      <Col>                        <Button                          className="m-2"                          variant="secondary"                          onClick={() => {                            auth.send                              .post('announcement/createcomment', {                                anname: an.anname,                                text: acc.get(i).comment,                              })                              .then(() => {                                console.log('then branch')                                viewIdea.update()                                acc.handleClearComment(i)                              })                              .catch((err: any) => {                                console.log('catch')                                acc.setError(err.response.data.message, i)                              })                          }}                        >                          New Comment                        </Button>                      </Col>                    </Row>                    {acc.get(i).errors.map((error) => (                      <Row>                        <Col>                          <Alert className="mx-2 mb-2" variant="danger">                            {error}                          </Alert>                        </Col>                      </Row>                    ))}                  </Container>                </Accordion.Collapse>              </Card.Footer>            </Card>          </Col>        ))}      </Row>      {idea.status !== 'complete' ? (        <Row className="p-3">          <Col sm="auto">            <NavLink              className="btn btn-secondary"              to={'/addannaoncement/' + id.toString()}            >              Add annonuncement            </NavLink>          </Col>        </Row>      ) : (        <Row>          <Col>            <Alert variant="secondary">              {"Client's comment: " + viewIdea.result}            </Alert>          </Col>        </Row>      )}    </Container>  )})